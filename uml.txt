- : private
+ : public
_ : static


------------------
 WarehouseManager
------------------
- warehouse: Warehouse
- time: Time
------------------
+ restoreFromFile(): void
+ saveToFile(): void
+ showCurrentDate(): void
+ fowardTime(): void
+ openProductManagerMenu(): void
+ openPartnerManagerMenu(): void
+ openTransactionManagerMenu(): void
+ openSearchMenu(): void
+ showGlobalBalance(): void
+ showAllProducts(): void
+ showAllBatches(): void
+ showBatchesSuppliedByPartner(): void
+ showBatchesOfProduct(): void
+ showPartner(): void
+ showAllPartners(): void
+ registerPartner(): void
+ toggleNotifications(): void
+ showPartnerPurchases(): void
+ showPartnerSales(): void
+ showTransaction(): void
+ registerDisaggregation(): void
+ registerSale(): void
+ registerPurchase(): void
+ registerSalePayment(): void
+ showBatchesWithLowerPrice(): void
+ showPartnerPaidTransactions(): void


-----------
 Warehouse
-----------
- batches: Batch[]
- products: Product[]
- transactions: Transaction[]
- partners: Partner[]
- accountingBalance: float
- availableBalance: float
-----------
+ addBatch(product: Product, supplier: Partner, price: float, quantity: int): void
+ removeBatch(batch: Batch): void
+ hasStock(product: Product): boolean
+ aggregate(product: Derivative): boolean
+ disagreggate(partner: Partner, product: Derivate, quantity: int): void
+ buy(partner: Partner, product: Product, price: float, quantity: int): void
+ sell(partner: Partner, date: Time, product: Product, quantity: int): boolean
+ addPartner(partner: Partner): void
+ sendNotification(): void


-------
 Batch
-------
- product: Product
- supplier: Partner
- quantity: int
- price: float
-------
+ isEmpty(): boolean
+ addUnit(units: int): boolean
+ removeUnit(units: int): boolean


--------
 Recipe
--------
- components: Product[]
- quantity: int[]


---------
 Product
---------
- name: String
---------

	--------
	 Simple
	--------
	--------

	------------
	 Derivative
	------------
	- recipe: Recipe
	------------


---------
 Partner
---------
- name: String
- address: String
- transactions: Transaction[]
- notifications: Notification[]
- status: Pontuation
---------
+ turnOnNotifications(product: Product): void
+ turnOffNotifications(product: Product): void
+ clearNotifications(): void
+ updateStatus(): void
+ paySale(sale: Sale): void


------------
 Pontuation
------------
- points: int
------------
+ addPoints(points: int): void
+ removePoints(points: int): void


-------------
 Transaction
-------------
- id: int
- type: String
- partner: Partner
- product: Product
- quantity: int
- paymentDate: Time
-------------

	----------
	 Purchase
	----------
	- price: float
	----------

	------
	 Sale
	------
	- basePrice: float
	- effectivePrice: float
	- limitPaymentDate: Time
	- effectivePaymentDate: Time
	------
	+ recalculateEffectivePrice(): void
	+ hasBeenPaid(): boolean
	+ applyExtras(): void

	----------------
	 Disaggregation
	----------------
	- basePrice: float
	- effectivePrice: float
	- resultingProducts: Product[]
	- resultingProductPrices: float[]


------
 Time
------
- date: int
------
+ fowardTime(int increment): void


--------------
 Notification
--------------
- product: Product
- description: String
--------------
