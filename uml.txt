- : private
+ : public
_ : static

? : doubt


-----------
 Warehouse
-----------
- lots: Lot[]
-----------
+ aggregate(): boolean     - aggregate products
+ disaggregate(): boolean  - disaggregate products
+ addLot(): boolean        - add a new lot to the warehouse
+ removeLot(): boolean     - remove a lot from the warehouse


---------
 Product (inherit simple and derivate)?
---------
- type: Str
---------
+ aggregate(products: Product[]): Product?
+ disaggregate(): Product[]?


---------
 Partner
---------
- name: Str
- address: Str
- status: Pontuation
- transactions: Transaction[]
- notifications: Notification[]?
---------
+ Partner(name: Str, address: Str)
+ getName(): Str
+ getAddress(): Str
+ getStatus(): Pontuation
// + notify


-------------
 Transaction (inherit purchases and sales?; disaggregations?)
-------------
- _numberTransactions: int
- id: int
- paymentDate: Time
-------------
+ getId(): int
+ getPaymentDate() Time

	-----------
	 Purchases
	-----------
	buyer: Entity ?
	seller: Entity ?

	-------
	 Sales
	-------
	buyer: Entity ?
	seller: Entity ?


------
 Time
------
- date: int
------
+ fowardTime(int increment): void


-----
 Lot
-----
- id: int? (to distinguish between lots)
- product: Product
- supplier: Partner
- unitsAvailable: int
- price: float
-----
+ Lot(product: Product, supplier: Partner, price: float, numberUnits: int)
+ getProduct(): Product
+ setProductPrice(price: float): void
+ getProductPrice(): float?
+ getSupplier(): Partner
+ getNumberAvailableUnits(): int
+ isEmpty(): boolean
+ addUnit(): boolean
+ removeUnit(): boolean


--------------
 Notification
--------------
- active: boolean
- deliveryMean: Str
-------------
+ turnOff(): void
+ turnOn(): void
+ addEntity(product: Partner?)
+ notififyExistance(product: Product): Str?
+ notififyPrice(product: Product): Str?


-------------------
 PontuationManager ?
-------------------
- points: int
