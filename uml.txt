- : private
+ : public
_ : static


-----------
 Warehouse
-----------
- batches: Batch[]
- notifications: NotificationManager
- transactions: TransactionManager
-----------
+ Warehouse()
+ addBatch(product: Product, supplier: Partner, price: float, quantity: int): void
+ removeBatch(batch: Batch): void
+ getBatchByProduct(product: Product): Batch
+ hasStock(product: Product): boolean
+ getLowestPrice(product: Product): float
+ getMaxPrice(product: Product): float
+ aggregate(product: Derivative): boolean
+ disagreggate(product: Derivate): void
+ getProductByName(name: Str): Product ?
+ getPartnerByName(name: Str): Partner ?


-------
 Batch
-------
- _numberBatchs: int
- product: Product
- supplier: Partner
- quantity: int
- price: float
-------
+ Batch(product: Product, supplier: Partner, price: float, quantity: int)
+ getProduct(): Product
+ getSupplier(): Partner
+ getQuantity(): int
+ getPrice(): float
+ isEmpty(): boolean
+ addUnit(numberToAdd: int): boolean
+ removeUnit(numberToRemove: int): boolean


---------
 Product
---------
- type: String
- name: String
---------
+ Product(type: String, name: String)
+ getType(): String
+ getName(): String
+ isEqual(product: Product): boolean

	--------
	 Simple
	--------
	--------

	------------
	 Derivative
	------------
	- components: Product[]
	------------
	+ Derivative(name: String, components: Product[])
	+ getComponents(): Product[] ?
	// + getComponents(): HashMap<Product, Integer>


--------
 Entity
--------
- name: String
- notifications: NotificationHolder
--------
+ Entity(name: String)
+ getName(): String
+ getNotifications(): Notification[]

	---------
	 Partner
	---------
	- address: String
	- transactions: TransactionHolder
	- status: PontuationManager
	---------
	+ Partner(name: String, address: String)
	+ getAddress(): String
	+ getTransactionHistory(): Transaction[]
	+ getStatus(): String
	+ getPontuation(): int
	+ buy() ?
	+ sell() ?


-------------------
 PontuationManager
-------------------
- points: int
-------------------
+ PontuationManager()
+ getStatus(): String
+ getPontuation(): int
+ addPoints(points: int): void
+ removePoints(points: int): void


-------------
 Transaction
-------------
- type: String
- id: int
- partner: Partner
- product: Product
- quantity: int
- paymentDate: Time
-------------
+ Transaction(int, String, Partner, Product, int, Time)
+ getPartnerId(): int
+ getProductId(): String
+ getQuantity(): int
+ getPaymentDate(): Time


	----------
	 Purchase
	----------
	- price: float
	----------
	+ Purchase(int, String, Partner, Product, int, Time, price)
	+ getPrice(): float


	------
	 Sell
	------
	- basePrice: float
	- effectivePrice: float
	- limitPaymentDate: Time
	- efectivePaymentDate: Time
	------
	+ Sell(int, String, Partner, Product, int, Time, float, Time)
	+ getBasePrice(): float
	+ getEffectivePrice(): float
	+ getEffectivePaymentDate(): Time
	+ getLimitPaymentDate(): Time
	+ recalculateEffectivePrice(): void
	+ hasBeenPaid(): boolean
	+ setEffectivePaymentDate(): void
	+ applyExtras(): void


----------------
 Disaggregation
----------------
- purchase: Purchase[]
- sell: Sell
----------------
+ getPurchases(): Purchase[]
+ getSell(): Sell


--------------------
 TransactionManager
--------------------
- _numberTransactions: int
- transactions: TransactionHolder[]
--------------------
+ TransactionManager()
+ getNumberTransactions(): int
+ addTransaction()
+ increaseNumberTransactions(): void


-------------------
 TransactionHolder
-------------------
- transactions: Transaction[]
-------------------
+ TransactionHolder()
+ addTransaction(Transaction)



------
 Time
------
- date: int
------
+ Time(int date)
+ getTime(): int
+ fowardTime(int increment): void



--------------
 Notification
--------------
- type: String
- product: Product
- price: float
--------------
+ getType(): String
+ getProductId(): String
+ getProductPrice(): float


---------------------
 NotificationManager
---------------------
- _allNotifications: Notification[]
- _clients: NotificationHolder[]
---------------------
+ sendNew(Product, deliveryMean: String): void
+ sendBargain(Product, deliveryMean: String): void

--------------------
 NotificationHolder
--------------------
- notifications: Notification[]
- deliveryMethods: String[]
- optIn: Product[]
--------------------
+ turnOn(Product): boolean
+ turnOff(Product): boolean
+ isActive(Product): boolean
+ addDeliveryMethod(String): void
+ clearNotifications(): void
