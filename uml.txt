- : private
+ : public
_ : static

? : doubt


-----------
 Warehouse
-----------
- batches: Batch[] (linked list)
- notifications: NotificationSender
- transactions: TransactionManager
-----------
+ Warehouse()
+ addBatch(Product, Partner, quantity: int, price: float): void
+ hasStock(Product): boolean
+ getMaxPrice(Product): float


---------
 Product
---------
- type: Str
- name: Str
---------
+ Product(type: Str, name: Str)
+ getType(): Str
+ getName(): Str


	--------
	 Simple
	--------
	--------


	------------
	 Derivative
	------------
	- components: Product[]
	------------
	+ Derivative(name: Str, components: Product[])
	+ getComponents(): Product[]



--------
 Entity
--------
- name: Str
- notifications: NotificationReceiver
--------
+ Entity(name: Str)
+ getName(): Str


	---------
	 Partner
	---------
	- address: Str
	- transactions: TransactionHolder
	- status: PontuationManager
	---------
	+ Partner(name: Str, address: Str)
	+ getAddress(): Str
	+ getStatus(): Pontuation


-------------
 Transaction
-------------
- id: int
- type: Str
- partner: Partner
- product: Product
- quantity: int
- paymentDate: Time
-------------
+ Transaction(int, Str, Partner, Product, int, Time)
+ getPartnerId(): int
+ getProductId(): Str
+ getQuantity(): int
+ getPaymentDate(): Time


	----------
	 Purchase
	----------
	- price: float
	----------
	+ Purchase(int, Str, Partner, Product, int, Time, price)
	+ getPrice(): float


	------
	 Sell
	------
	- basePrice: float
	- realPrice: float
	- limitPaymentDate: Time
	- efectivePaymentDate: Time
	------
	+ Sell(int, Str, Partner, Product, int, Time, float, Time)
	+ getBasePrice(): float
	+ getRealPrice(): float
	+ getEffectivePaymentDate(): Time
	+ getLimitPaymentDate(): Time
	+ recalculateRealPrice(): void
	+ hasBeenPaid(): boolean
	+ setEffectivePaymentDate(): void
	+ applyFine...(): void


	----------------
	 Disaggregation
	----------------
	- purchase: Purchase[]
	- sell: Sell
	----------------


--------------------
 TransactionManager
--------------------
- _numberTransactions: int
- _transactions: TransactionHolder[]
--------------------
+ getNumberTransactions(): int
+ increaseNumberTransactions(): void


-------------------
 TransactionHolder
-------------------
- transactions: Transaction[]
-------------------
+ TransactionHolder()
+ addTransaction(Transaction)



------
 Time
------
- date: int
------
+ Time(int date)
+ fowardTime(int increment): void


-------
 Batch
-------
- _numberBatchs: int
- id: int
- product: Product
- supplier: Partner
- unitsAvailable: int
- price: float
-------
+ Batch(product: Product, supplier: Partner, price: float, numberUnits: int)
+ getProduct(): Product
+ getPrice(): float?
+ getSupplier(): Partner
+ getNumberAvailableUnits(): int
+ isEmpty(): boolean
+ addUnit(quantity: int): boolean
+ removeUnit(quantity: int): boolean


--------------
 Notification
--------------
- type: Str
- product: Product
- price: float
--------------
+ getType(): Str
+ getProductId(): Str
+ getProductPrice(): float


---------------------
 NotificationManager
---------------------
- _allNotifications: Notification[]
- _receiver: NotificationReceiver[]
---------------------


	--------------------
	 NotificationSender
	--------------------
	--------------------
	+ sendNew(Product, deliveryMean: Str): void
	+ sendBargain(Product, deliveryMean: Str): void


	----------------------
	 NotificationReceiver
	----------------------
	- notifications: Notification[]
	- deliveryMethods: Str[]
	- optIn: Product[]
	----------------------
	+ turnOn(Product): boolean
	+ turnOff(Product): boolean
	+ isActive(Product): boolean
	+ addDeliveryMethod(Str): void
	+ clearNotifications(): void



-------------------
 PontuationManager
-------------------
- points: int
-------------------
+ getClassification(): Str
+ addPoints(int): void
+ removePoints(int): void
