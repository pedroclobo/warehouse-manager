- : private
+ : public
_ : static


------------------
 WarehouseManager
------------------
- partners: Partner[]
- transactions: Transaction[]
- products: Product[] ?
------------------
+ addPartner(partner: Partner): void
+ addTransaction(transaction: Transaction): void


-----------
 Warehouse
-----------
- batches: Batch[]
- notifications: NotificationManager
- transactions: TransactionManager
-----------
+ addBatch(product: Product, supplier: Partner, price: float, quantity: int): void
+ removeBatch(batch: Batch): void
+ getBatchByProduct(product: Product): Batch
+ hasStock(product: Product): boolean
+ getLowestPrice(product: Product): float
+ getMaxPrice(product: Product): float
+ aggregate(product: Derivative): boolean
+ disagreggate(product: Derivate): void


-------
 Batch
-------
- product: Product
- supplier: Partner
- quantity: int
- price: float
-------
+ isEmpty(): boolean
+ addUnit(units: int): boolean
+ removeUnit(units: int): boolean


---------
 Product
---------
- name: String
---------
+ isEqual(product: Product): boolean

	--------
	 Simple
	--------
	--------

	------------
	 Derivative
	------------
	- components: Product[]
	------------


---------
 Partner
---------
- name: String
- address: String
- transactions: Transaction[]
- status: Pontuation
---------
+ buy() ?
+ sell() ?
+ turnOnNotifications(Product): boolean
+ turnOffNotifications(Product): boolean
+ clearNotifications(): void


------------
 Pontuation
------------
- points: int
------------
+ addPoints(points: int): void
+ removePoints(points: int): void


-------------
 Transaction
-------------
- type: String
- id: int
- partner: Partner
- product: Product
- quantity: int
- paymentDate: Time
-------------


	----------
	 Purchase
	----------
	- price: float
	----------
	+ Purchase(int, String, Partner, Product, int, Time, price)
	+ getPrice(): float


	------
	 Sell
	------
	- basePrice: float
	- effectivePrice: float
	- limitPaymentDate: Time
	- efectivePaymentDate: Time
	------
	+ recalculateEffectivePrice(): void
	+ hasBeenPaid(): boolean
	+ setEffectivePaymentDate(): void
	+ applyExtras(): void


	----------------
	 Disaggregation
	----------------
	- purchase: Purchase[]
	- sell: Sell
	----------------
	+ getPurchases(): Purchase[]
	+ getSell(): Sell


------
 Time
------
- date: int
------
+ fowardTime(int increment): void


--------------
 Notification
--------------
- type: String
- product: Product
- price: float
--------------
+ getType(): String
+ getProductId(): String
+ getProductPrice(): float
